{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Kform is a framework that brings the power of 'KRM as code or data' to Kubernetes. With Kform, orchestrating KRM resources becomes a easy through intuitive and human-readable configuration files. These files are not only reusable and shareable but can also be version-controlled, ensuring seamless collaboration among team members.</p> <p>At its core, Kform empowers you to manage the entire lifecycle of KRM resources specified through the configuration files consistently. Whether it's deployment, scaling, or any other operation, Kform streamlines the process for any resource modeled as KRM. This framework is designed to enhance efficiency and maintainability, making Kubernetes resource orchestration a straightforward and manageable task.\"</p>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#design","title":"Design","text":""},{"location":"#plan","title":"Plan","text":""},{"location":"#apply","title":"Apply","text":""},{"location":"#why","title":"Why?","text":"<ul> <li>manage any KRM resource</li> <li>track changes     stored through the k8s api</li> <li>declarative     describe end state</li> <li>standardize     modules</li> <li>collaborate</li> </ul>"},{"location":"#join-us","title":"Join us","text":"<p>Have questions, ideas, bug reports or just want to chat? Come join our discord server.</p>"},{"location":"02-concepts/01_about/","title":"Concepts","text":""},{"location":"02-concepts/02_package/","title":"Package","text":"<p>A <code>package</code> represents a collection of KRM resources, organized within a repository and utilizing <code>YAML</code> as the file format. These resources, defined in the Kubernetes Resource Model, encapsulate configurations, definitions, and metadata necessary to deploy and manage specific functionalities or components within a system. Each <code>package</code> is structured to encapsulate related resources, ensuring modularity, portability, and ease of management in various environments. A <code>package</code> is contained within a directory of a repsoitory.</p> <p>Practically a package can be used in various ways (e.g. a certManager package would be a package to ), Configuration artifacts</p>"},{"location":"02-concepts/02_package/#packagerevision","title":"PackageRevision","text":"<p>A <code>package</code> in the <code>pkgserver</code> is represented through a <code>PackageRevision</code> KRM resource in the Kubernetes API server. </p>"},{"location":"02-concepts/02_package/#identification","title":"Identification","text":"<p>A <code>PackageRevision</code> is uniquely identified by the following parameters:</p> <p>Target: Specifies the deployment target where the package will be deployed.</p> <p>Repository: Indicates the repository housing the package.</p> <p>Realm: Represents a logical grouping or domain name that associates related packages together.</p> <p>Package: Denotes the name of the package.</p> <p>Workspace: Specifies the working environment or branch where the package is being edited.</p> <p>Revision: Signifies a unique identifier for a specific revision of the package. This parameter becomes relevant once the package is published.</p>"},{"location":"02-concepts/02_package/#lifecycle","title":"Lifecycle","text":"<p>A <code>PackageRevision</code> defines the revision of a package and is managed through a state machine. A <code>PackageRevision</code> can exist in the following states within the state machine:</p> <p>Draft: The initial state of a package revision. In this state, the <code>package revision</code> is actively being developed and is not yet ready for publication.     When using a Git Repository, the <code>package</code> is contained within a specific workspace branch representing the package revision.</p> <p>Proposed: Transitioning from the Draft state, a <code>package revision</code> enters the Proposed state when it is submitted for review and consideration for publication. This is an administrative action without influence on the revision backend.</p> <p>Published: Once approved, a <code>package revision</code> moves into the Published state, indicating that it is publicly available for consumption. At this stage, the <code>package</code> receives a specific <code>package revision</code> identifier that uniquely identifies the package.     When using a Git Repository, the package is merged into the main branch and tagged with a specific <code>package revision</code> tag that uniquely identifies the package.</p> <p>Deletion Proposed: In certain circumstances, a <code>package revision</code> may be marked for deletion. It enters the Deletion Proposed state pending approval for removal. This is an administrative action without influence on the revision backend.</p> <p>Deleted: The final state of a <code>package revision</code>, indicating that it has been removed from the system and is no longer accessible. If a <code>package revisio</code>n ever had a <code>package revision</code> identifier, the tag will be deleted when it transitions to the Deleted state.</p> <pre><code>graph TD;\n    subgraph \"Package Lifecycle\"\n        Deleted;\n        DeletionProposed;\n        Published;\n        Draft;\n        Proposed;\n        Deleted -- Create (Create Branch) --&gt; Draft;\n        DeletionProposed -- Delete (Delete Tag) --&gt; Deleted;\n        DeletionProposed -- Update (Lifecycle: Publish) --&gt; Published;\n        Draft -- Delete --&gt; Deleted;\n        Draft -- Update (Lifecycle: Draft) --&gt; DeletionProposed;\n        Draft -- Update (Lifecycle: Proposed) --&gt; Proposed;\n        Proposed -- Delete --&gt; Deleted;\n        Proposed -- Update (Lifecycle: Draft) --&gt; Draft;\n        Proposed -- Update (Lifecycle: Publish) (Create TAG, merge WS branch to main)--&gt; Published;\n        Proposed -- Update (Lifecycle: Deletion proposed) --&gt; DeletionProposed;\n        Published -- Update (Lifecycle: Deletion proposed) --&gt; DeletionProposed;\n    end</code></pre>"},{"location":"03-userguide/01_about/","title":"UserGuide","text":"<p>The <code>PkgServer</code> is system that handles the lifecycle of a <code>Package</code></p> <p>It provides a control plane for creating, modifying, updating, and deleting packages, and evaluating functions on package data. This enables operations on packaged resources similar to operations directly on the live state through the Kubernetes API.</p>"},{"location":"03-userguide/01_about/#the-kform-configuration-language","title":"The KForm configuration language","text":""},{"location":"03-userguide/02_repository/","title":"Repository","text":""},{"location":"03-userguide/03_package/","title":"Repository","text":""},{"location":"03-userguide/10_api/","title":"Repository","text":""},{"location":"04-examples/01_about/","title":"Examples","text":""},{"location":"05-dev/01_about/","title":"Development guide","text":""},{"location":"07-community/01_about/","title":"Community","text":""}]}